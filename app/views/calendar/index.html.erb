<!doctype html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body onload="init()">
<div id="scheduler_here" class="dhx_cal_container" style='width:100%; height:800px;'>
  <div class="dhx_cal_navline">
    <div class="dhx_cal_prev_button">&nbsp;</div>
    <div class="dhx_cal_next_button">&nbsp;</div>
    <div class="dhx_cal_today_button"></div>
    <div class="dhx_cal_date"></div>
    <div class="dhx_cal_tab" name="day_tab" style="right:204px;"></div>
    <div class="dhx_cal_tab" name="week_tab" style="right:140px;"></div>
    <div class="dhx_cal_tab" name="month_tab" style="right:76px;"></div>
    <div class="dhx_minical_icon" id="dhx_minical_icon" onclick="show_minical()" >&nbsp;</div>
  </div>
  <div class="dhx_cal_header">
  </div>
  <div class="dhx_cal_data">
  </div>
</div>
<div class="add_event_button" data-tooltip="Create new event"><span></span></div>
</body>

<script>
    function show_minical() {
        if (scheduler.isCalendarVisible())
            scheduler.destroyCalendar();
        else
            scheduler.renderCalendar({
                position: "dhx_minical_icon",
                date: scheduler.getState().date,
                navigation: true,
                handler: function (date, calendar) {
                    scheduler.setCurrentView(date);
                    scheduler.destroyCalendar()
                }
            });
    }

    function init() {
        var compactView = {
            xy: {
                nav_height: 80
            },
            config: {
                header: {
                    rows: [
                        {
                            cols: [
                                "prev",
                                "date",
                                "next",
                            ]
                        },
                        {
                            cols: [
                                "day",
                                "week",
                                "month",
                                "spacer",
                                "today"
                            ]
                        }
                    ]
                }
            },
            templates: {
                month_scale_date: scheduler.date.date_to_str("%D"),
                week_scale_date: scheduler.date.date_to_str("%D, %j"),
                event_bar_date: function (start, end, ev) {
                    return "";
                }

            }
        };
        var fullView = {
            xy: {
                nav_height: 80
            },
            config: {
                header: [
                    "day",
                    "week",
                    "month",
                    "date",
                    "prev",
                    "today",
                    "next"
                ]
            },
            templates: {
                month_scale_date: scheduler.date.date_to_str("%l"),
                week_scale_date: scheduler.date.date_to_str("%l, %F %j"),
                event_bar_date: function (start, end, ev) {
                    return "â€¢ <b>" + scheduler.templates.event_date(start) + "</b> ";
                }
            }
        };

        function resetConfig() {
            var settings;
            if (window.innerWidth < 1000) {
                settings = compactView;
            } else {
                settings = fullView;

            }
            scheduler.utils.mixin(scheduler.config, settings.config, true);
            scheduler.utils.mixin(scheduler.templates, settings.templates, true);
            scheduler.utils.mixin(scheduler.xy, settings.xy, true);
            return true;
        }

        scheduler.config.responsive_lightbox = true;
        resetConfig();
        scheduler.attachEvent("onBeforeViewChange", resetConfig);
        scheduler.attachEvent("onSchedulerResize", resetConfig);

        scheduler.config.multi_day = true;
        scheduler.locale.labels.section_category_name = "category_name";
        scheduler.config.limit_time_select = true;
        scheduler.config.details_on_dblclick = true;
        scheduler.config.details_on_create = true;
        scheduler.templates.event_class = function (start, end, event) {
            var css = "";

            if (event.category_name)
                css += "event_" + event.category_name;
            return css; // default return
        };

        var category_name = [
            {key: 'diet', label: 'Diet'},
            {key: 'workout', label: 'Workout'}
        ];

        scheduler.config.lightbox.sections = [
            {name: "description", height: 43, map_to: "text", type: "textarea", focus: true},
            {name: "Category", height: 20, type: "select", options: category_name, map_to: "category_name"},
            {name: "time", height: 72, type: "time", map_to: "auto"}
        ];
        scheduler.config.xml_date = "%Y-%m-%d %H:%i";
        scheduler.init("scheduler_here", new Date(), "week");
        scheduler.load("<%= data_path %>/", "json");

        var dp = new dataProcessor("<%= data_path %>/");
        dp.init(scheduler);
        dp.setTransactionMode("REST");
        document.querySelector(".add_event_button").addEventListener("click", function () {
            scheduler.addEventNow();
        });
    }

</script>